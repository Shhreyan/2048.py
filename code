import tkinter as tk
import random

COLORS = {
    0: "azure4",
    2: "#eee4da",
    4: "#ede0c8",
    8: "#f2b179",
    16: "#f59563",
    32: "#f67c5f",
    64: "#f65e3b",
    128: "#edcf72",
    256: "#edcc61",
    512: "#edc850",
    1024: "#edc53f",
    2048: "#edc22e",
}

TEXT_COLORS = {
    0: "black",
    2: "#776e65",
    4: "#776e65",
    8: "#f9f6f2",
    16: "#f9f6f2",
    32: "#f9f6f2",
    64: "#f9f6f2",
    128: "#f9f6f2",
    256: "#f9f6f2",
    512: "#f9f6f2",
    1024: "#f9f6f2",
    2048: "#f9f6f2",
}

class Game2048:
    def __init__(self, master):
        self.master = master
        self.master.title("2048 Game")
        self.board = [[0] * 4 for _ in range(4)]
        self.cells = [[None] * 4 for _ in range(4)]
        self.init_gui()
        self.add_new_tile()
        self.add_new_tile()
        self.update_gui()

    def init_gui(self):
        self.grid_frame = tk.Frame(self.master, bg="azure3")
        self.grid_frame.grid(sticky="nsew")
        self.master.grid_rowconfigure(0, weight=1)
        self.master.grid_columnconfigure(0, weight=1)

        for i in range(4):
            self.grid_frame.grid_rowconfigure(i, weight=1)
            self.grid_frame.grid_columnconfigure(i, weight=1)
            for j in range(4):
                cell_frame = tk.Frame(
                    self.grid_frame,
                    bg="azure4",
                    width=100,
                    height=100
                )
                cell_frame.grid(row=i, column=j, padx=5, pady=5)
                cell_number = tk.Label(self.grid_frame, text="", bg="azure4", font=("Helvetica", 24, "bold"))
                cell_number.grid(row=i, column=j)
                self.cells[i][j] = cell_number

        self.master.bind("<Key>", self.handle_keypress)

    def add_new_tile(self):
        empty_cells = [(i, j) for i in range(4) for j in range(4) if self.board[i][j] == 0]
        if empty_cells:
            i, j = random.choice(empty_cells)
            self.board[i][j] = 4 if random.random() < 0.1 else 2

    def update_gui(self):
        for i in range(4):
            for j in range(4):
                value = self.board[i][j]
                self.cells[i][j].configure(
                    text="" if value == 0 else str(value),
                    bg=COLORS[value],
                    fg=TEXT_COLORS[value]
                )
        self.master.update_idletasks()  # Ensure the GUI is updated smoothly

    def handle_keypress(self, event):
        key = event.keysym
        if key == 'Up':
            self.board = self.move_up(self.board)
        elif key == 'Down':
            self.board = self.move_down(self.board)
        elif key == 'Left':
            self.board = self.move_left(self.board)
        elif key == 'Right':
            self.board = self.move_right(self.board)
        else:
            return

        self.add_new_tile()
        self.update_gui()

        if not self.can_move(self.board):
            self.game_over()

    def can_move(self, board):
        for i in range(4):
            for j in range(4):
                if board[i][j] == 0:
                    return True
                if i > 0 and board[i][j] == board[i-1][j]:
                    return True
                if i < 3 and board[i][j] == board[i+1][j]:
                    return True
                if j > 0 and board[i][j] == board[i][j-1]:
                    return True
                if j < 3 and board[i][j] == board[i][j+1]:
                    return True
        return False

    def game_over(self):
        game_over_frame = tk.Frame(self.master, bg="black", width=400, height=400)
        game_over_frame.place(relx=0.5, rely=0.5, anchor="center")
        game_over_label = tk.Label(game_over_frame, text="Game Over", bg="black", fg="white", font=("Helvetica", 48))
        game_over_label.pack(expand=True)

    def compress(self, board):
        new_board = [[0] * 4 for _ in range(4)]
        for i in range(4):
            pos = 0
            for j in range(4):
                if board[i][j] != 0:
                    new_board[i][pos] = board[i][j]
                    pos += 1
        return new_board

    def merge(self, board):
        for i in range(4):
            for j in range(3):
                if board[i][j] != 0 and board[i][j] == board[i][j + 1]:
                    board[i][j] *= 2
                    board[i][j + 1] = 0
        return board

    def reverse(self, board):
        new_board = []
        for i in range(4):
            new_board.append(list(reversed(board[i])))
        return new_board

    def transpose(self, board):
        new_board = []
        for i in range(4):
            new_row = []
            for j in range(4):
                new_row.append(board[j][i])
            new_board.append(new_row)
        return new_board

    def move_left(self, board):
        new_board = self.compress(board)
        new_board = self.merge(new_board)
        new_board = self.compress(new_board)
        return new_board

    def move_right(self, board):
        new_board = self.reverse(board)
        new_board = self.move_left(new_board)
        new_board = self.reverse(new_board)
        return new_board

    def move_up(self, board):
        new_board = self.transpose(board)
        new_board = self.move_left(new_board)
        new_board = self.transpose(new_board)
        return new_board

    def move_down(self, board):
        new_board = self.transpose(board)
        new_board = self.move_right(new_board)
        new_board = self.transpose(new_board)
        return new_board

if __name__ == "__main__":
    root = tk.Tk()
    game = Game2048(root)
    root.mainloop()
